name: Release

on:
  push:
    tags:
      - "*"
  workflow_dispatch:
    inputs:
      branch_or_tag:
        required: false
      is_release:
        required: false
        default: false

jobs:
  mac:
    strategy:
      fail-fast: false
      matrix:
        otp:
          - 25.1.2-2
          - 24.3.4.2-2
        os:
          - macos-12-arm64
          - macos-12
          - macos-11
    runs-on: ${{ matrix.os }}
    steps:
      - id: prepare
        shell: bash
        run: |
          brew update
          brew install curl zip unzip coreutils openssl@1.1
          echo "/usr/local/opt/bison/bin" >> $GITHUB_PATH
          echo "/usr/local/bin" >> $GITHUB_PATH
          echo "emqx_name=${emqx_name}" >> $GITHUB_OUTPUT
          OTP_SOURCE_PATH="$HOME/src/otp-${{ inputs.otp }}"
          OTP_INSTALL_PATH="$HOME/otp/${{ inputs.otp }}"
          echo "OTP_SOURCE_PATH=$OTP_SOURCE_PATH" >> $GITHUB_OUTPUT
          echo "OTP_INSTALL_PATH=$OTP_INSTALL_PATH" >> $GITHUB_OUTPUT
          mkdir -p "$OTP_SOURCE_PATH" "$OTP_INSTALL_PATH"
      - uses: actions/cache@v3
        id: cache
        with:
          path: ${{ steps.prepare.outputs.OTP_INSTALL_PATH }}
          key: otp-install-${{ inputs.otp }}-${{ inputs.os }}-static-ssl-disable-hipe-disable-jit
      - name: build erlang
        if: steps.cache.outputs.cache-hit != 'true'
        shell: bash
        run: |
          OTP_SOURCE_PATH="${{ steps.prepare.outputs.OTP_SOURCE_PATH }}"
          OTP_INSTALL_PATH="${{ steps.prepare.outputs.OTP_INSTALL_PATH }}"
          if [ -d "$OTP_SOURCE_PATH" ]; then
            rm -rf "$OTP_SOURCE_PATH"
          fi
          git clone --depth 1 --branch OTP-${{ inputs.otp }} https://github.com/emqx/otp.git "$OTP_SOURCE_PATH"
          cd "$OTP_SOURCE_PATH"
          if [ "$(arch)" = arm64 ]; then
              export LDFLAGS="-L$(brew --prefix unixodbc)/lib"
              export CC="/usr/bin/gcc -I$(brew --prefix unixodbc)/include"
          fi
          ./configure --disable-dynamic-ssl-lib --with-ssl=$(brew --prefix openssl@1.1) --disable-hipe --disable-jit --prefix="$OTP_INSTALL_PATH"
          make -j$(nproc)
          rm -rf "$OTP_INSTALL_PATH"
          make install
          if [ "$(arch)" = arm64 ]; then
              unset LDFLAGS
              unset CC
          fi
          echo "$OTP_INSTALL_PATH" >> $GITHUB_PATH

      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch_or_tag }} # when input is not given, the event tag is used

      - name: install rebar3
        run: |
          wget https://s3.amazonaws.com/rebar3/rebar3 && chmod +x rebar3
          cp ./rebar3 /usr/local/bin/rebar3

      - name: test build
        if: ! startsWith(github.ref, 'refs/tags/') || inputs.is_release == false
        run: |
          make

      - name: build release
        if: startsWith(github.ref, 'refs/tags/') || inputs.is_release == true
        run: |
          BUILD_RELEASE=1 make

      - uses: actions/upload-artifact@v3
        if: startsWith(github.ref, 'refs/tags/') || inputs.is_release == true
        with:
          name: packages
          path: |
            _packages/*.gz
            _packages/*.gz.sha256

  linux:
    strategy:
      fail-fast: false
      matrix:
        builder:
          - 5.0-32
        otp:
          - 25.1.2-2
          - 24.3.4.2-2
        elixir:
          - 1.13.4
        arch:
          - amd64
          - arm64
        os:
          - ubuntu22.04
          - ubuntu20.04
          - ubuntu18.04
          - ubuntu16.04
          - debian11
          - debian10
          - debian9
          - el9
          - el8
          - el7
          - amzn2
          - alpine3.15.1
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.inputs.branch_or_tag }} # when input is not given, the event tag is used

      - uses: docker/setup-buildx-action@v2

      - uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{ matrix.arch }}

      - name: test build
        if: ! startsWith(github.ref, 'refs/tags/') || inputs.is_release == false
        run: |
          IMAGE=ghcr.io/emqx/emqx-builder/${{ matrix.builder }}:${{ matrix.elixir }}-${{ matrix.otp }}-${{ matrix.os }}
          docker run --user 1001 --rm -v $(pwd):/wd --workdir /wd --platform=linux/${{ matrix.arch }} $IMAGE bash -euc 'make'

      - name: build release
        if: startsWith(github.ref, 'refs/tags/') || inputs.is_release == true
        run: |
          IMAGE=ghcr.io/emqx/emqx-builder/${{ matrix.builder }}:${{ matrix.elixir }}-${{ matrix.otp }}-${{ matrix.os }}
          docker run --user 1001 --rm -v $(pwd):/wd --workdir /wd --platform=linux/${{ matrix.arch }} -e BUILD_RELEASE=1 $IMAGE bash -euc 'make'

      - uses: actions/upload-artifact@v3
        if: startsWith(github.ref, 'refs/tags/') || inputs.is_release == true
        with:
          name: packages
          path: |
            _packages/*.gz
            _packages/*.gz.sha256

  release:
    runs-on: ubuntu-latest
    needs:
      - mac
      - linux
    if: startsWith(github.ref, 'refs/tags/') || inputs.is_release == true
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: packages
          path: packages
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          name: Erlang Rocksdb NIF ${{ github.ref_name }} Released
          files: packages/*
          draft: false
          prerelease: false
